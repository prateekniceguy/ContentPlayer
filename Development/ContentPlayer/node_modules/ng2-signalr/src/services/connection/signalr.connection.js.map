{"version":3,"file":"signalr.connection.js","sourceRoot":"","sources":["../../../../src/services/connection/signalr.connection.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISignalRConnection } from './i.signalr.connection';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BroadcastEventListener } from '../eventing/broadcast.event.listener';\r\nimport { ConnectionStatus } from './connection.status';\r\nimport { NgZone } from '@angular/core';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { SignalRConfiguration } from '../signalr.configuration';\r\nimport { ConnectionTransport } from './connection.transport';\nexport class SignalRConnection implements ISignalRConnection {\nprivate _status: Observable<ConnectionStatus>;\nprivate _errors: Observable<any>;\nprivate _jConnection: any;\nprivate _jProxy: any;\nprivate _zone: NgZone;\nprivate _configuration: SignalRConfiguration;\n/**\n * @param {?} jConnection\n * @param {?} jProxy\n * @param {?} zone\n * @param {?} configuration\n */\nconstructor(jConnection: any, jProxy: any, zone: NgZone, configuration: SignalRConfiguration) {\r\n        this._jProxy = jProxy;\r\n        this._jConnection = jConnection;\r\n        this._zone = zone;\r\n        this._errors = this.wireUpErrorsAsObservable();\r\n        this._status = this.wireUpStatusEventsAsObservable();\r\n        this._configuration = configuration;\r\n    }\n/**\n * @return {?}\n */\npublic get errors(): Observable<any> {\r\n        return this._errors;\r\n    }\n/**\n * @return {?}\n */\npublic get status(): Observable<ConnectionStatus> {\r\n        return this._status;\r\n    }\n/**\n * @return {?}\n */\npublic start(): Promise<ISignalRConnection> {\r\n\r\n        let /** @type {?} */ jTransports = this.convertTransports(this._configuration.transport);\r\n\r\n        let /** @type {?} */ $promise = new Promise<ISignalRConnection>((resolve, reject) => {\r\n                this._jConnection\r\n                .start({\r\n                        jsonp: this._configuration.jsonp,\r\n                        transport: jTransports,\r\n                        withCredentials: this._configuration.withCredentials,\r\n                    })\r\n                .done(() => {\r\n                        console.log('Connection established, ID: ' + this._jConnection.id);\r\n                        console.log('Connection established, Transport: ' + this._jConnection.transport.name);\r\n                        resolve(this);\r\n                    })\r\n                .fail((error: any) => {\r\n                        console.log('Could not connect');\r\n                        reject('Failed to connect. Error: ' + error.message); // ex: Error during negotiation request.\r\n                    });\r\n            });\r\n        return $promise;\r\n    }\n/**\n * @return {?}\n */\npublic stop(): void {\r\n        this._jConnection.stop();\r\n    }\n/**\n * @return {?}\n */\npublic get id(): string {\r\n        return this._jConnection.id;\r\n    }\n/**\n * @param {?} method\n * @param {...?} parameters\n * @return {?}\n */\npublic invoke(method: string, ...parameters: any[]): Promise<any> {\r\n        if (method == null) {\r\n            throw new Error('SignalRConnection: Failed to invoke. Argument \\'method\\' can not be null');\r\n        }\r\n        this.log(`SignalRConnection. Start invoking \\'${method}\\'...`);\r\n\r\n        let /** @type {?} */ $promise = new Promise<any>((resolve, reject) => {\r\n            this._jProxy.invoke(method, ...parameters)\r\n                .done((result: any) => {\r\n                    this.log(`\\'${method}\\' invoked succesfully. Resolving promise...`);\r\n                    resolve(result);\r\n                    this.log(`Promise resolved.`);\r\n                })\r\n                .fail((err: any) => {\r\n                    console.log(`Invoking \\'${method}\\' failed. Rejecting promise...`);\r\n                    reject(err);\r\n                    console.log(`Promise rejected.`);\r\n                });\r\n        });\r\n        return $promise;\r\n    }\n/**\n * @param {?} listener\n * @return {?}\n */\npublic listen<T>(listener: BroadcastEventListener<T>): void {\r\n        if (listener == null) {\r\n            throw new Error('Failed to listen. Argument \\'listener\\' can not be null');\r\n        }\r\n\r\n        this.log(`SignalRConnection: Starting to listen to server event with name ${listener.event}`);\r\n        this._jProxy.on(listener.event, (...args: any[]) => {\r\n\r\n            this._zone.run(() => {\r\n                let /** @type {?} */ casted: T = null;\r\n                if (args.length > 0) {\r\n                    casted = /** @type {?} */(( <T>args[0]));\r\n                };\r\n                this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n                listener.next(casted);\r\n                this.log('listener next() called.');\r\n            });\r\n        });\r\n    }\n/**\n * @param {?} event\n * @return {?}\n */\npublic listenFor<T>(event: string): BroadcastEventListener<T> {\r\n        if (event == null || event === '') {\r\n            throw new Error('Failed to listen. Argument \\'event\\' can not be empty');\r\n        }\r\n\r\n        let /** @type {?} */ listener = new BroadcastEventListener<T>(event);\r\n\r\n        this.listen(listener);\r\n\r\n        return listener;\r\n    }\n/**\n * @param {?} transports\n * @return {?}\n */\nprivate convertTransports(transports: ConnectionTransport | ConnectionTransport[]): any {\r\n        if (transports instanceof Array) {\r\n            return transports.map((t: ConnectionTransport) => t.name);\r\n        }\r\n        return transports.name;\r\n    }\n/**\n * @return {?}\n */\nprivate wireUpErrorsAsObservable(): Observable<any> {\r\n        let /** @type {?} */ sError = new Subject<any>();\r\n\r\n        this._jConnection.error((error: any) => {\r\n            //this._zone.run(() => {  /*errors don't need to run in a  zone*/\r\n            sError.next(error);\r\n            //});\r\n        });\r\n        return sError;\r\n    }\n/**\n * @return {?}\n */\nprivate wireUpStatusEventsAsObservable(): Observable<ConnectionStatus> {\r\n        let /** @type {?} */ sStatus = new Subject<ConnectionStatus>();\r\n        // aggregate all signalr connection status handlers into 1 observable.\r\n        // handler wire up, for signalr connection status callback.\r\n        this._jConnection.stateChanged((change: any) => {\r\n            this._zone.run(() => {\r\n                sStatus.next(new ConnectionStatus(change.newState));\r\n            });\r\n        });\r\n        return sStatus;\r\n    }\n/**\n * @param {?} listener\n * @param {...?} args\n * @return {?}\n */\nprivate onBroadcastEventReceived<T>(listener: BroadcastEventListener<T>, ...args: any[]) {\r\n        this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n\r\n        let /** @type {?} */ casted: T = null;\r\n        if (args.length > 0) {\r\n            casted = /** @type {?} */(( <T>args[0]));\r\n        }\r\n\r\n        this._zone.run(() => {\r\n            listener.next(casted);\r\n        });\r\n\r\n        this.log('listener next() called.');\r\n    }\n/**\n * @param {...?} args\n * @return {?}\n */\nprivate log(...args: any[]) {\r\n        if (this._jConnection.logging === false) {\r\n            return;\r\n        }\r\n        console.log(args.join(', '));\r\n    }\r\n}\n\nfunction SignalRConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nSignalRConnection.prototype._status;\n/** @type {?} */\nSignalRConnection.prototype._errors;\n/** @type {?} */\nSignalRConnection.prototype._jConnection;\n/** @type {?} */\nSignalRConnection.prototype._jProxy;\n/** @type {?} */\nSignalRConnection.prototype._zone;\n/** @type {?} */\nSignalRConnection.prototype._configuration;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}